input can be condensed as: repeat for each input{
inp w
mul x 0                                                                     
add x z
mod x 26                                                                      
div z  1   1   1   1  26   1   1  26   1  26  26  26  26  26                   
add x 13  15  15  11  -7  10  10  -5  15  -3   0  -5  -9   0                   
eql x w
eql x 0
mul y 0
add y 25                                                 
mul y x                                                                   
add y 1                                                                   
mul z y                                                                 
mul y 0
add y w                                                               
add y  6   7  10   2  15   8   1  10   5   3   5  11  12  10          
mul y x                                                               
add z y                                                                     
}

interpreted as: (with character of input being w[i], l#[i] being the ith element of the list of numbers on the #'th line)

bool t = (z%26 + l7[i] == w[i]);   
z = z/l6[i] * ((t)?1:26);
y = (t)?0:(w[i] + l17[i]);
z = z + y; 


I then wrote everything out, trying to make t true at every possible place (which synced with l6[i] being 26), which led to the following relations:
w[0] + 6 = w[13]
w[1] - 2 = w[12]
w[2] + 5 = w[11]
w[3] - 5 = w[4]
w[5] + 8 = w[10]
w[6] - 4 = w[7]
w[8] + 2 = w[9]

which can be solved fairly easily for max and min values that satisfy these relations.

c.cpp is just actually emulating the code, and I'm just running it for the inputs I got from hand.  I already wrote the code just in case this was quickly findable by brute force, so I didn't use it for my solution, but whatever.
